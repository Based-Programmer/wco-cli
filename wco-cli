#!/bin/sh

#quality=hd
is_download=n
download_dir=~/Videos
agent='Mozilla/5.0 (Windows NT 10.0; rv:108.0) Gecko/20100101 Firefox/108.0'

while getopts 'dp:q:h' OPT; do
	case $OPT in
        d) is_download=y ;;
        p) is_download=y && download_dir="$OPTARG" ;;
        q) quality=$OPTARG ;;
	*) printf "\nEnjoy watching Cartoons & Animes from wcostream.net\n\nDependencies: curl, fzf, nodejs(for decoding the link), mpv (Streaming video), aria2 (Optimal, for downloading)\n\nFor using this script inside termux u should've mpv-android installed with \"user-agent='Mozilla/5.0 (Windows NT 10.0; rv:108.0) Gecko/20100101 Firefox/108.0'\" inside Settings/Advanced/'Edit mpv.conf' & no referrer\n\nUsage:\nwco-cli <Options> <search term>\n\nOptions:\n-d Download Cartoons/Animes in ~/Videos\n-p Select Download Directory\n-q Select Video Quality [fhd|hd|sd]\n-h Help\n" && exit 1 ;;
	esac
done
shift $((OPTIND - 1))

[ -z "$*" ] && printf '\033[1;35mSearch Cartoon/Anime\n> \033[0m\n' && read -r name || name="$*"
printf '\033[1;36mSearching Cartoon/Anime - %s\033[0m\n' "$name"

data="$(curl --cipher AES256-SHA256 --tls-max 1.2 -sA "$agent" 'https://www.wcostream.net/search' --data-urlencode "catara=$name" --data-urlencode "konuara=series" | sed -nE 's,^<a href="(/anime/[^"]*)".*>(.*)</a>,https://www.wcostream.net\1	\2,p')"
[ -z "$data" ] && printf '\033[1;31mNo Result\033[0m\n' && exit 1 || selected="$(printf '%s' "$data" | fzf --with-nth 2.. --height=33% --border -1 --layout=reverse --cycle --prompt 'Select a Cartoon/Anime: ')"
[ -z "$selected" ] && printf "Nothing's selected\n" && exit || title="${selected##*	}"
data="$(curl --cipher AES256-SHA256 --tls-max 1.2 -sA "$agent" "${selected%%	*}" | sed -nE 's,^[[:space:]]*<li><a href="(https://www.wcostream.net/[^"]*)".*class="sonra">(.*)</a>.*,\1	\2,p')"
[ -z "$data" ] && printf '\033[1;31mNo result\033[0m\n' && exit 1
num_ep="$(printf '%s\n' "$data" | wc -l)"

selection () {
    case "$REPLY" in
        next) selected="$(printf '%s' "$data" | sed "$((current_ep - 1)) q;d")" ;;
        previous) selected="$(printf '%s' "$data" | sed "$((current_ep + 1)) q;d")" ;;
        replay) selected="$(printf '%s' "$data" | sed "$current_ep q;d")" ;;
	download) selected="$(printf '%s' "$data" | sed "$current_ep q;d")" && is_download=y ;;
        *) selected="$(printf '%s' "$data" | fzf --with-nth 2.. --tac --border -1 --layout=reverse --cycle --prompt 'Select a Episode: ')"
    esac    
    [ -z "$selected" ] && printf "Nothing's selected\n" && exit
    #printf '%s\n' "$selected"
}

fetch_link () {
    current_ep="$(printf '%s' "$data" | grep -m1 -n "$selected" | cut -d: -f1)"
    [ "$num_ep" -gt 1 ] && ep_title="${selected##*	}"
    video_js_data="$(curl --cipher AES256-SHA256 --tls-max 1.2 -sA "$agent" "${selected%%	*}")"
    link="$(printf '%s' "$video_js_data" | sed -nE '/^[[:space:]]*<iframe id=.*src="https:\/\/embed\.watchanimesub\.net\/inc\/embed\/video-js\.php\?file=./ {s,^[[:space:]]*<iframe id=.*src="(https://embed\.watchanimesub\.net/inc/embed/video-js\.php\?file=.[^"]*).*,\1,p;q}')"
    [ -z "$link" ] && link="$(node -e "$(printf '%s' "$video_js_data" | sed -nE 's|<script>(.*)document\.write\(decodeURIComponent\(escape\(([^\)]*)\).*|\1 console.log(\2.replace(/.*src="(https:\\/\\/embed\\.watchanimesub\\.net\\/[^"]*)[\\s\\S]*/, "$1"))\;|p')")"
    #printf '%s\n' "$link" > ~/.cache/link

    [ -z "$link" ] && printf '\033[1;31mNo result from video link\033[0m\n' && exit 1 || embed="$(printf '%s' "$link" | sed -nE 's,.*&embed=([^&?]*),\1,p')"
    if [ "$embed" = "www" ]; then
	wco_dir='cizgi/'
    elif [ "$embed" = "neptun" ]; then
	wco_dir='neptun/'
    else
	wco_dir=''
    fi	
    link="$(printf '%s' "$link" | sed -nE "s,https://embed\.watchanimesub\.net/inc/embed/video-js\.php\?file=(.*)\.flv(&(full)?hd=1)?.*(&embed=[^&?]*),https://embed\.watchanimesub\.net/inc/embed/getvidlink.php?v=$wco_dir\1.mp4\4\2,p")"
    #[ -z "$link" ] && printf 'No result from video-js.php\n' && exit 1 || link="$(curl --cipher AES256-SHA256 --tls-max 1.2 -sA "$agent" --referer "$link" "$link" | sed -nE 's,.*getJSON\("(/inc/embed/getvidlink\.php[^"]*).*,https://embed.watchanimesub.net\1,p')"
    #printf '%s\n' "$link" >> ~/.cache/link

    [ -z "$link" ] && printf '\033[1;31mNo result from video-js.php\033[0m\n' && exit 1 || link_data="$(curl -sA "$agent" --referer "$link" -H 'X-Requested-With: XMLHttpRequest' "$link" | tr -d \\\\)"
    #printf '%s' "$link_data" > ~/.cache/wco.json
    [ "$quality" = 'hd' ] && hd='hd' || hd='f?hd' # For regex matching
    [ -z "$link_data" ] && printf 'No result form the API\n' && exit 1 || [ "$quality" = 'sd' ] || vid_link="$(printf '%s' "$link_data" | sed -nE "s,.*\"server\":\"(.[^\",]*).*\"$hd\":\"(.[^\",]*)\".*,\1/getvid?evid=\2,p")"
    [ -z "$vid_link" ] || [ "$quality" = "sd" ] && vid_link="$(printf '%s' "$link_data" | sed -nE 's,.*"enc":"(.[^",]*).*"server":"(.[^",]*).*,\2/getvid?evid=\1,p')"
    [ -z "$vid_link" ] && printf '\033[1;31mNo vid link\033[0m\n' && exit 1
    #printf '%s\n' "$vid_link"
}

play () {
    printf '\033[1;33mPlaying %s out of %s\033[0m\n\n' "$ep_title" "$num_ep"
    if uname -a | grep -qE '[Aa]ndroid'; then
	am start --user 0 -a android.intent.action.VIEW -d "$vid_link" -n is.xyz.mpv/.MPVActivity > /dev/null 2>&1 &
    else
        mpv --force-window=immediate --force-media-title="$ep_title out of $num_ep" --user-agent="$agent" "$vid_link" > /dev/null 2>&1 &
    fi
}    

download () {
    printf '\033[1;33mDownloading %s out of %s\033[0m\n' "$ep_title" "$num_ep"
    
    [ "$num_ep" -gt 1 ] && dir="$download_dir/$title" || dir="$download_dir"
 
    aria2c --user-agent="$agent" --check-certificate=false --summary-interval=0 -j 16 -x 16 -s 16 -k 1M --dir="$dir" -o "$ep_title.mp4" --download-result=hide "$vid_link" && printf '\033[1;32mDownload Completed %s\033[0m\n\n' "$ep_title" || printf '\033[1;31mDownload Failed %s\033[0m\n\n' "$ep_title"
}    

while [ "$REPLY" != 'quit' ]; do
    selection
    fetch_link
    tput clear
    [ "$is_download" = 'y' ] && download || play

    if [ "$num_ep" -gt 1 ]; then
        if [ "$current_ep" = "$num_ep" ]; then
            selection="next\nreplay\ndownload\nselect\nquit"
        elif [ "$current_ep" -eq 1 ]; then
            selection="previous\nreplay\ndownload\nselect\nquit"
        else
            selection="next\nprevious\nreplay\ndownload\nselect\nquit"
        fi
    else
        selection="replay\ndownload\nquit"
    fi    

    REPLY="$(printf "$selection" | fzf --height=22% --border -1 --layout=reverse --cycle --prompt 'Select a Option: ')"
done
