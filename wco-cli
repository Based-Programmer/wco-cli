#!/bin/sh

quality="${WCO_CLI_QUALITY:-fhd}"
is_download="${WCO_CLI_DOWNLOAD:-n}"
download_dir="${WCO_CLI_DOWNLOAD_DIR:-$HOME/Videos}"
agent='uwu'
wm="${WCO_CLI_WM:-false}"
base_url='www.wcostream.org'

while getopts 'dp:q:wa:h' OPT; do
    case $OPT in
	d) is_download=y ;;
	p) is_download=y && download_dir="$OPTARG" ;;
	q) quality=$OPTARG ;;
	w) wm='true' ;;
	a) anime_link="$OPTARG" ;;
	*) printf "\nEnjoy watching Cartoons & Animes from wcostream.net\n\nDependencies: curl, fzf, nodejs(for decoding the link), mpv (Streaming video), aria2 (Optimal, for downloading)\n\nFor using this script inside termux u should've mpv-android installed with \"user-agent='Mozilla/5.0'\" inside Settings/Advanced/'Edit mpv.conf' & no referrer\n\nUsage:\nwco-cli <Options> <search term>\n\nOptions:\n-d Download Cartoons/Animes in ~/Videos\n-p Select Download Directory\n-q Select Video Quality [fhd|hd|sd]\n-a Direct Anime Link like -a https://www.wcostream.org/anime/death-note\n-w Use this option if fzf breaks due to tiling in ur WM or just export WCO_CLI_WM='true'\n-h For what u r seeing right now\n" && exit 1 ;;
	esac
done
shift $((OPTIND - 1))

[ -z "$anime_link" ] && {
[ -z "$*" ] && printf '\033[1;35mSearch Cartoon/Anime\n> \033[0m' && read -r name || name="$*"
printf '\033[1;36mSearching Cartoon/Anime - %s\033[0m\n' "$name"

data="$(curl -sA "$agent" "https://$base_url/search" --data-urlencode "catara=$name" -d 'konuara=series' | sed -nE "s,^<a href=\"(/anime/[^\"]*)\".*>(.*)</a>,https://$base_url\1	\2,p")"
[ -z "$data" ] && printf '\033[1;31mNo Result\033[0m\n' && exit 1 || selected="$(printf '%s' "$data" | fzf --with-nth 2.. --height=33% --layout=reverse --cycle --prompt 'Select a Cartoon/Anime: ')"
[ -z "$selected" ] && printf "Nothing's selected\n" && exit || title="${selected##*	}"
anime_link="${selected%%	*}"
}
data="$(curl -sA "$agent" "$anime_link")"
[ -z "$data" ] && printf '\033[1;31mNo result\033[0m\n' && exit 1
[ -z "$title" ] && title="$(printf '%s' "$data" | sed -nE 's,    <td class="vsbaslik" valign="top"><h2 title=".*">(.*)</h2></td>.,\1,p')"
data="$(printf '%s' "$data" | sed -nE "s,^[[:space:]]*<li><a href=\"(https://$base_url/[^\"]*)\".*class=\"sonra\">(.*)</a>.*,\1	\2,p" | tac)"
num_ep="$(printf '%s\n' "$data" | wc -l)"

selection () {
    case "$REPLY" in
        next) : $((start+=1)) && end="$start" ;;
        previous) : $((start-=1)) && end="$start" ;;
        replay)  ;;
	download) is_download=y ;;
        *) selected="$(printf '%s' "$data" | nl | sed 's/^ *//' | fzf --with-nth 3.. -m --reverse --cycle --prompt 'Select a Episode: ')"
        [ -z "$selected" ] && printf "Nothing's selected\n" && exit

	start="$(printf '%s' "$selected" | head -1)"
	start="${start%%	*}"
	end="$(printf '%s' "$selected" | tail -1)"
        end="${end%%	*}"
	[ "$start" -gt "$end" ] && {
	    start=$((start+end))
	    end=$((start-end))
	    start=$((start-end))
		}
    esac    
    #printf '%s\n' "$selected"
}

fetch_link () {
    selected="$(printf '%s' "$data" | sed "$start !d")"
    [ "$num_ep" -gt 1 ] && ep_title="${selected##*	}"
    video_js_data="$(curl -sA "$agent" "${selected%%	*}")"
    #printf '%s\n' "$video_js_data" > ~/.cache/Test/wco.html
    link="$(printf '%s' "$video_js_data" | sed -nE '/^[[:space:]]*<iframe id=.*src="https:\/\/embed\.watchanimesub\.net\/inc\/embed\/video-js\.php\?file=./ {s,^[[:space:]]*<iframe id=.*src="(https://embed\.watchanimesub\.net/inc/embed/video-js\.php\?file=.[^"]*).*,\1,p;q}')"
    [ -z "$link" ] && link="$(node -e "$(printf '%s' "$video_js_data" | sed -nE '/<script>.*document\.write\(decodeURIComponent.*<\/script>/ {s|<script>(.*)document\.write\(decodeURIComponent\(escape\(([^\)]*)\).*|\1 console.log(\2.replace(/.*src="(https:\\/\\/embed\\.watchanimesub\\.net\\/[^"]*)[\\s\\S]*/, "$1"))\;|p;q}')")"
    #printf '%s\n' "$link" > ~/.cache/link

    [ -z "$link" ] && printf '\033[1;31mNo result from video link\033[0m\n' && exit 1 || embed="$(printf '%s' "$link" | sed -nE 's,.*&embed=([^&?]*),\1,p')"

    [ "$embed" = "www" ] && wco_dir='cizgi/' || {
	[ "$embed" = "neptun" ] && wco_dir='neptun/'
    }
    link="$(printf '%s' "$link" | sed -nE "s,https://embed\.watchanimesub\.net/inc/embed/video-js\.php\?file=(.*)\.flv(&(full)?hd=1)?.*(&embed=[^&?]*),https://embed\.watchanimesub\.net/inc/embed/getvidlink.php?v=$wco_dir\1.mp4\4\2,p")"
    #[ -z "$link" ] && printf 'No result from video-js.php\n' && exit 1 || link="$(curl -sA "$agent" --referer "$link" "$link" | sed -nE 's,.*getJSON\("(/inc/embed/getvidlink\.php[^"]*).*,https://embed.watchanimesub.net\1,p')"
    #printf '%s\n' "$link" > ~/.cache/link

    [ -z "$link" ] && printf '\033[1;31mNo result from video-js.php\033[0m\n' && exit 1 || link_data="$(curl -sA "$agent" --referer "$link" -H 'X-Requested-With: XMLHttpRequest' "$link" | tr -d \\\\)"
    #printf '%s' "$link_data" > ~/.cache/wco.json
    [ "$quality" = 'hd' ] && hd='hd' || hd='f?hd' # For regex matching
    [ -z "$link_data" ] && printf '\033[1;31mNo result from the API\033[0m\n' && exit 1 || [ "$quality" = 'sd' ] || vid_link="$(printf '%s' "$link_data" | sed -nE "s,.*\"server\":\"([^\"][^\"]*)\".*\"$hd\":\"([^\"][^\"]*)\".*,\1/getvid?evid=\2,p")"
    [ -z "$vid_link" ] || [ "$quality" = "sd" ] && vid_link="$(printf '%s' "$link_data" | sed -nE 's,.*"enc":"([^\"][^\"]*)".*"server":"([^\"][^\"]*)".*,\2/getvid?evid=\1,p')"
    [ -z "$vid_link" ] && printf '\033[1;31mNo vid link\033[0m\n' && exit 1
    #printf '%s\n' "$vid_link" > ~/.cache/link
    wait
}

play () {
    [ "$wm" != 'true' ] && printf '\033[1;33mPlaying %s out of %s\033[0m\n\n' "$ep_title" "$num_ep" || header="Playing $ep_title out of $num_ep"

    if uname -a | grep -qE '[Aa]ndroid'; then
	am start --user 0 -a android.intent.action.VIEW -d "$vid_link" -n is.xyz.mpv/.MPVActivity > /dev/null 2>&1 &
    else
        mpv --speed=1 --no-terminal --force-window=immediate --force-media-title="$ep_title out of $num_ep" --user-agent="$agent" "$vid_link" &
    fi
}    

download () {
    printf '\033[1;33mDownloading %s out of %s\033[0m\n' "$ep_title" "$num_ep"
    
    [ "$num_ep" -gt 1 ] && dir="$download_dir/$title" || dir="$download_dir"
 
    aria2c --user-agent="$agent" --check-certificate=false --summary-interval=0 -j 16 -x 16 -s 16 -k 1M --dir="$dir" -o "$ep_title.mp4" --download-result=hide "$vid_link" && printf '\033[1;32mDownload Completed %s\033[0m\n\n' "$ep_title" || printf '\033[1;31mDownload Failed %s\033[0m\n\n' "$ep_title"
}    

while [ "$REPLY" != 'quit' ]; do
    selection

    while [ "$start" -le "$end" ]; do
	fetch_link
	tput clear
	[ "$is_download" = 'y' ] && download || play
	: $((start+=1))
    done
    : $((start-=1))

    if [ "$num_ep" -gt 1 ]; then
        if [ "$start" = "$num_ep" ]; then
            selection="previous\nreplay\ndownload\nselect\nquit"
        elif [ "$start" -eq 1 ]; then
            selection="next\nreplay\ndownload\nselect\nquit"
        else
            selection="next\nprevious\nreplay\ndownload\nselect\nquit"
        fi
    else
        selection="replay\ndownload\nquit"
    fi    

    [ "$wm" = 'true' ] && [ "$is_download" != 'y' ] && REPLY="$(printf "$selection" | fzf --layout=reverse --cycle --header="$header" --header-first --color='header:41' --prompt 'Select a Option: ')" || REPLY="$(printf "$selection" | fzf --layout=reverse --cycle --height=22% --prompt 'Select a Option: ')"
done
